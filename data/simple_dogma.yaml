#dogma_template defines the different types of templates for network object
#dogma_template format:
#dogma type -> edge_list
#edge_list - array of [ src_node_type, dst_node_type, edge_type]
dogma_template:
    protein:
        - [genome, mRNA, -dTx>]
        - [mRNA, protein, -dTl>]
        - [protein, active, -dAct>]
    complex:
        - [active]
    chemical:
        - [active]
    abstract:
        - [active]
    family:
        - [active]
    rna:
        - [genome, mRNA, -dTx>]
        - [mRNA, active, -dAct>]
    miRNA:
        - [genome, mRNA, -dTx>]
        - [mRNA, active, -dAct>]



#interactions define how the sub-elements of two templates are connected
#interactions format:
#edge_type -> [ src_node_type, dst_node_type ]
interactions:
    -t> : [active, mRNA]
    -t| : [active, mRNA]
    -a> : [active, active]
    -a| : [active, active]
    component> : [active, active]
    -ap> : [active, active]
    -ap| : [active, active]
    member> : [active, active]


factor_tables : 
    positive : 
        - [0.9990, 0.0005, 0.0005]
        - [0.0005, 0.9990, 0.0005]
        - [0.0005, 0.0005, 0.9990]
    negative : 
        - [0.0005, 0.0005, 0.9990]
        - [0.0005, 0.9990, 0.0005]
        - [0.9990, 0.0005, 0.0005]

factor_functions : 
    max : |
        def max_val(inputs):
            epsilon = 0.001
            other_vals = []
            child_val = None
            for v in inputs:
                if inputs[v]['child']:
                    child_val = inputs[v]['value']
                else:
                    other_vals.append(inputs[v]['value'])
            if max(other_vals) == child_val:
                return 1.0 - epsilon
            return epsilon / 2.0 #float(len(other_vals))
    min : |
        def min_val(inputs):
            epsilon = 0.001
            other_vals = []
            child_val = None
            for v in inputs:
                if inputs[v]['child']:
                    child_val = inputs[v]['value']
                else:
                    other_vals.append(inputs[v]['value'])
            if min(other_vals) == child_val:
                return 1.0 - epsilon
            return epsilon / 2.0 #float(len(other_vals))

    downwins: |
        def downwins_val(inputs):
            epsilon = 0.001
            other_vals = []
            child_val = None
            for v in inputs:
                if inputs[v]['child']:
                    child_val = inputs[v]['value']
                else:
                    if inputs[v]['info']:
                        other_vals.append(inputs[v]['value'])
                    else:
                        other_vals.append(2 - inputs[v]['value'])
            if other_vals.count(2) > other_vals.count(0):
                winner = 2
            elif other_vals.count(0) > 0 and other_vals.count(0) >= other_vals.count(2):
                winner = 0
            else:
                winner = 1
            if winner == child_val:
                return 1.0 - epsilon
            else:
                return epsilon / 2.0 #float(len(other_vals))



#combine_rules format:
#Edge type
#    dst_node_type
#        rules

combine_rules : 

    genome : 


    mRNA:
        - 
            edges : 
                -dTx> : True 
                -t> : True
                -t| : False
            split_size : 0
            rule_type : function
            rule_name : downwins

    protein:
        - 
            edges: 
                -dTl> : True
            split_size : 0
            rule_type : function
            rule_name : downwins

    active:
        - 
            dogmas : [ protein, chemical, abstract, rna, miRNA ]
            edges : 
                -dAct> : True
                -a> : True
                -a| : False
                -ap> : True
                -ap| : False
                -t| : False
            split_size : 0
            rule_type : function
            rule_name : downwins
        - 
            dogmas : [ complex ]
            edges: 
                component> : True
                -a> : True
                -a| : False
                -ap> : True
            split_size : 0
            rule_type : function
            rule_name : min
        - 
            dogmas : [ family ]
            edges: 
                member> : True
                -a> : True
                -a| : False
            split_size : 0
            rule_type : function
            rule_name : max
