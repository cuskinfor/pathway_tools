#dogma_template defines the different types of templates for network object
#dogma_template format:
#dogma type -> edge_list
#edge_list - array of [ src_node_type, dst_node_type, edge_type]
dogma_template:
    protein:
        - [ genome,  mRNA, -dTx> ]
        - [ genome,  promoter, -dPm> ]
        - [ mRNA,    protein, -dTl> ]
        - [ protein, active,  -dAct> ]
        - [ txreg,   mRNA,    -cTx> ]
        - [ promoter,mRNA,    -cTp> ]
        - [ tlreg,   protein, -cTl> ]
        - [ actreg,  active,  -cAct> ]
    'chemical':
        - [ actreg,  active,  -cAct> ]
    'family':
        - [ active ]
    'complex':
        - [ actreg,  active,  -cAct> ]
    'abstract':
        - [ active ]
    'rna':
        - [ active ]
    'miRNA':
        - [ active ]


#interactions define how the sub-elements of two templates are connected
#interactions format:
#list -> [ src_node_type, dst_node_type, edge_type ]
interactions:
    - [ active,  txreg, -t> ]
    - [ active,  txreg, -t| ]
    - [ active,  actreg,  -a> ]
    - [ active,  actreg,  -a| ]
    - [ active,  active, -ap> ]
    - [ active,  active, -ap| ]
    - [ active, active, component> ]
    - [ active,  active, member> ]


edge_names:
    "-a>" : Protein Activation
    "-a|" : Protein Inhibition
    "-t>" : Transcriptional Activation
    "-t|" : Transcriptional Inhibition
    "-ap>" : Abstract Activation
    "-ap|" : Abstract Inhibition
    "component>" : Complex component
    "member>" : Family member


factor_tables : 
    positive : 
        - [0.9, 0.05, 0.05]
        - [0.05, 0.9, 0.05]
        - [0.05, 0.05, 0.9]
    negative : 
        - [0.05, 0.05, 0.9]
        - [0.05, 0.9, 0.05]
        - [0.9, 0.05, 0.05]

factor_functions : 
    max : |
        def max_val(inputs):
            other_vals = []
            child_val = None
            for v in inputs:
                if v == 'child':
                    child_val = inputs[v]
                else:
                    other_vals.append(inputs[v])
            if max(other_vals) == child_val:
                return 0.9
            return 0.1 / float(len(other_vals))
    min : |
        def min_val(inputs):
            other_vals = []
            child_val = None
            for v in inputs:
                if v == 'child':
                    child_val = inputs[v]
                else:
                    other_vals.append(inputs[v])
            if min(other_vals) == child_val:
                return 0.9
            return 0.1 / float(len(other_vals))

#factor format:
#Edge type
#    dst_template_name
#        dst_node_type
#            probabilities


factors_fixed:
    -a>:
        factor_table : positive
    -ap>:
        factor_table : positive
    -ap|:
        factor_table : negative
    -a|:
        factor_table : negative
    -dAct>:
        factor_table : positive
    -dTl>:
        factor_table : positive
    -dTx>:
        factor_table : positive
    -t>:
        factor_table : positive
    -t|:
        factor_table : negative
    'component>' :
        factor_function : min
        combine : 
            method : function
            types : [ component> ]

    'member>' :
        factor_function : max
        combine : 
            method : function
            types : [ member> ]
    -dPm>:
        factor_table : positive
    -cTx>:
        factor_table : positive
    -cTp>:
        factor_table : negative
    -cTl>:
        factor_table : negative
    -cAct>:
        factor_table : negative


